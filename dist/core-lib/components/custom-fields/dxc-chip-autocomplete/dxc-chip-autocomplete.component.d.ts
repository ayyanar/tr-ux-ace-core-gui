import { OnInit, AfterViewInit, ElementRef, OnChanges, DoCheck, OnDestroy } from '@angular/core';
import { FormControl, ControlValueAccessor, Validator, ValidationErrors, FormGroupDirective } from '@angular/forms';
import { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { Observable } from 'rxjs';
import { Overlay } from '@angular/cdk/overlay';
import * as i0 from "@angular/core";
export declare class DxcChipAutocompleteComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges, DoCheck, ControlValueAccessor, Validator {
    private elRef;
    overlay: Overlay;
    _parentFormGroup: FormGroupDirective;
    placeholder: string;
    hint: string;
    autoCompleteChipList: FormControl;
    visible: boolean;
    selectable: boolean;
    removable: boolean;
    addOnBlur: boolean;
    isShowMoreVisible: boolean;
    disabled: boolean;
    filteredOptions: Observable<any[]>;
    chips: any;
    showChips: any[];
    isInvalid: boolean;
    isError: boolean;
    errorMessage: string;
    isPasted: boolean;
    pasteText: string;
    private overlayRef;
    private dropdownValue;
    private startIndex;
    private _dropdownList;
    private _dropdownLimit;
    private _searchLimit;
    private _displayDropdownByDefault;
    private _maxChipsAllow;
    private _maxChipsShow;
    private _replaceStop;
    private _required;
    private _readonly;
    private _searchBy;
    private ddlSubscription;
    private controlSubscription;
    set required(value: boolean);
    get required(): boolean;
    set readonly(value: boolean);
    get readonly(): boolean;
    set dropdownList(obs: Observable<any>);
    set dropdownLimit(value: number);
    get dropdownLimit(): number;
    set searchLimit(value: number);
    get searchLimit(): number;
    set displayDropdownByDefault(value: boolean);
    get displayDropdownByDefault(): boolean;
    set maxChipsAllow(value: number);
    get maxChipsAllow(): number;
    set maxChipsShow(value: number);
    get maxChipsShow(): number;
    set replaceStop(value: string | string[]);
    set searchBy(value: 'id' | 'value' | 'all');
    get searchBy(): 'id' | 'value' | 'all';
    private addConditionOrigin;
    private addConditionTemplate;
    private chipParent;
    private chipInput;
    constructor(elRef: ElementRef, overlay: Overlay, _parentFormGroup: FormGroupDirective);
    propagateChange: any;
    ngOnInit(): void;
    ngOnChanges(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    registerOnValidatorChange?(fn: () => void): void;
    validate(c: FormControl): ValidationErrors;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    clearOnBlur(): void;
    onPaste(event: ClipboardEvent): void;
    ngAfterViewInit(): void;
    updateDropdown(str: string): void;
    toggleInput(val: string): boolean;
    addChip(event: MatAutocompleteSelectedEvent, input: any): void;
    setShowChips(chips: any[]): any;
    removeChip(chip: any, deleteType: string): void;
    returnData(value: any): void;
    ForEditControl(value: any): void;
    validateAllChips(): void;
    showAllChips(): void;
    closeAllChips(): void;
    showDropdropdown(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxcChipAutocompleteComponent, [null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxcChipAutocompleteComponent, "dxc-chip-autocomplete", never, { "placeholder": "placeholder"; "hint": "hint"; "required": "required"; "readonly": "readonly"; "dropdownList": "dropdownList"; "dropdownLimit": "dropdownLimit"; "searchLimit": "searchLimit"; "displayDropdownByDefault": "displayDropdownByDefault"; "maxChipsAllow": "maxChipsAllow"; "maxChipsShow": "maxChipsShow"; "replaceStop": "replaceStop"; "searchBy": "searchBy"; }, {}, never, never>;
}
